# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

show_line_handler = null

clue = 'intro'

has_geolocation = ->
  return !!navigator.geolocation

got_pos = (pos) ->
  console.log 'Got pos!' 
  lat = pos.coords.latitude
  lng = pos.coords.longitude
  console.log("lat: #{lat}, lng: #{lng}")
  $.ajax({url: "/checkpos", data: {
      'lat': lat, 'lng': lng, 'clue': clue}}).done (response) ->
    console.log "Response #{JSON.stringify(response)}"

got_pos_fail = ->
  $('#output').text 'Getting your location failed'

speak = (name) ->
  $.ajax({url: '/getlines', data: {name: name}}).done (response) ->
    show_lines name, response["lines"], response["block"], response["next"]

show_lines = (name, lines, block, next) ->
  if block
    clue = name
  show_line = ->
    if lines.length
      content = $('.speech-content')
      content.append "<p class='dash-line'>#{lines.shift()}</p>"
      content.scrollTop content.prop('scrollHeight')
    else
      content = $('.speech-content')
      if block
        $('#check-location').show()
      else
        content.append '<%= image_tag "paw-print.png", size: "100x100", class: "dash-paw" %>'
        content.scrollTop content.prop('scrollHeight')
        $('.dash-paw').click ->
          content.empty()
          speak next
      window.clearInterval(show_line_handler)
      show_line_handler = null
  show_line_handler = window.setInterval(show_line, 200)

$ ->
  speak "intro"

  $('#check-location').click ->
    have_geo = has_geolocation()
    console.log have_geo
    # navigator.geolocation.getCurrentPosition(got_pos, got_pos_fail)
    # Not going to get https working locally for time constraints. Hard
    # code values of home.
    got_pos({coords: {latitude: 37.371859, longitude: -122.0212337}})
    event.preventDefault()
